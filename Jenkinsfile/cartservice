pipeline {
    agent any

    tools {
        // .NET SDK should be installed in Jenkins global tools config
        dotnetsdk 'dotnet9'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_NAME  = 'harishnshetty/cartservice'
        IMAGE_NAME   = 'cartservice'
    }

    stages {
        stage("Clean Workspace") {
            steps { cleanWs() }
        }

        stage("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/harishnshetty/Google-microservices-devsecops-project.git'
            }
        }

        // --- Build & Unit Tests (Moved before SonarQube to generate coverage) ---
        stage("Build & Test (Generate Coverage)") {
            steps {
                dir('src/cartservice') {
                    sh '''
                    # Restore packages
                    dotnet restore
                    # Build the main project
                    dotnet build --no-incremental src/cartservice.csproj
                    # Run tests and generate coverage report in Cobertura format
                    # Assumes coverlet.collector is referenced in the test project
                    dotnet test tests/cartservice.tests.csproj \
                        --collect "Cobertura" \
                        --logger "trx" \
                        /p:CollectCoverage=true \
                        /p:CoverletOutputFormat=cobertura \
                        /p:CoverletOutput=./TestResults/coverage/cobertura.xml
                    '''
                }
            }
            post {
                always {
                    // Archive Test Results and Coverage Report for later processing/reporting
                    archiveArtifacts artifacts: 'src/cartservice/tests/TestResults/**/*.trx'
                    archiveArtifacts artifacts: 'src/cartservice/tests/TestResults/coverage/cobertura.xml', allowEmpty: true
                }
            }
        }

        // --- SAST: SonarQube for C# ---
        stage("SonarQube Analysis") {
            steps {
                dir('src/cartservice') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        dotnet tool install --global dotnet-sonarscanner || true
                        export PATH="$PATH:$HOME/.dotnet/tools"

                        # Begin SonarScanner with parameters including coverage report
                        # Path for coverage report is relative to the directory where 'dotnet test' ran (tests/TestResults/...)
                        dotnet sonarscanner begin \
                            /k:"cartservice" \
                            /d:sonar.host.url=$SONAR_HOST_URL \
                            /d:sonar.login=$SONAR_AUTH_TOKEN \
                            /d:sonar.cs.opencover.reportsPaths="tests/TestResults/*/coverage/cobertura.xml"
                            
                        dotnet build src/cartservice.csproj
                        dotnet sonarscanner end /d:sonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        // --- Quality Gate ---
        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') { // Increased timeout for safety
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                    }
                }
            }
        }

        // --- Dependency Check (SCA) ---
        stage("Dependency Check") {
            steps {
                dir('src/cartservice') {
                    dependencyCheck additionalArguments: ''' 
                        --scan ./ 
                        --format XML 
                        --out dependency-check-report.xml 
                    ''',
                    odcInstallation: 'dp-check'
                }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/dependency-check-report.xml'
                }
            }
        }

        // --- Trivy FS Scan ---
        stage("Trivy File Scan") {
            steps {
                dir('src/cartservice') {
                    sh '''
                    # Setting exit-code 0 and piping output to file, then check file size for real pass/fail later if needed
                    trivy fs . --severity CRITICAL,HIGH --exit-code 0 --scanners vuln,misconfig,secret > trivy-fs-report.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/trivy-fs-report.txt'
                }
            }
        }

        // --- Build Docker Image ---
        stage("Build Docker Image") {
            steps {
                dir('src/cartservice') { // Changed base dir to src/cartservice
                    script {
                        env.IMAGE_TAG = "$DOCKER_NAME:${BUILD_NUMBER}"
                        sh "docker rmi -f $IMAGE_NAME ${env.IMAGE_TAG} || true"
                        // Build context is src/cartservice, Dockerfile is src/cartservice/src/Dockerfile
                        sh "docker build -t $IMAGE_NAME -f src/Dockerfile ." 
                    }
                }
            }
        }

        // --- Push Docker Image ---
        stage("Push to DockerHub") {
            steps {
                dir('src/cartservice') { // Run from the base directory
                    withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
                            sh "docker login -u harishnshetty -p ${dockerpwd}"
                            sh "docker tag $IMAGE_NAME ${env.IMAGE_TAG}"
                            sh "docker push ${env.IMAGE_TAG}"

                            // Also push latest
                            sh "docker tag $IMAGE_NAME $DOCKER_NAME:latest"
                            sh "docker push $DOCKER_NAME:latest"
                    }
                }
            }
        }

        // --- Trivy Image Scan ---
        stage("Trivy Scan Image") {
            steps {
                dir('src/cartservice') {
                sh '''
                trivy image -f json -o trivy-image-cart.json ${IMAGE_TAG}
                trivy image -f table -o trivy-image-cart.txt ${IMAGE_TAG}
                '''
            }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/trivy-image-cart.txt'
                    archiveArtifacts 'src/cartservice/trivy-image-cart.json'
                }
            }
        }
    }

    // --- Final Notifications ---
    post {
        always {
            dir('src/cartservice') {
                script {
                    def buildStatus = currentBuild.currentResult
                    def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: ' Github User'

                    emailext (
                        subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            <p>Cartservice Google-Shop DevSecOps pipeline status.</p>
                            <p>Youtube Link :- https://www.youtube.com/@devopsHarishNShetty </p>
                            <p>Project: ${env.JOB_NAME}</p>
                            <p>Build Number: ${env.BUILD_NUMBER}</p>
                            <p>Build Status: ${buildStatus}</p>
                            <p>Started by: ${buildUser}</p>
                            <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        """,
                        to: 'harishn662@gmail.com',
                        from: 'harishn662@gmail.com',
                        mimeType: 'text/html',
                        attachmentsPattern: 'trivy-fs-report.txt,trivy-image-cart.json,trivy-image-cart.txt,dependency-check-report.xml'
                    )
                }
            }
        }
    }
}